// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

        static int qy2;
        static Array a;
        /** Initializes the library. */

        function void init() {
            do Math.powerInit();
            return;
        }

        /** Initializes the power array. */
        function void powerInit() {
            var int i;
            let a = Array.new(16);
            let a[0] = 1;
            let i = 1;
            while (i < 16) {
                let a[i] = ^a[i-1];
                let i = i + 1;
            }
            return;
        }

        /** Returns 2^x. */
        function int power(int x) {
            return a[x];
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0) {
                return -x;
            } else {
                return x;
            }
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            var int sum, shiftedx, i, temp; 
            var boolean sgn;

            let sgn = ((x > 0) = (y > 0));

            let x= Math.abs(x);
            let y= Math.abs(y);

            if (x < y) {
                let temp = x;
                let x = y;
                let y = temp;
            }

            let sum = 0;
            let shiftedx = x;
            let i = 0;
            while (i < 16) {
                if (y & Math.power(i)) {
                    let sum = sum + shiftedx;
                }
                let shiftedx = ^shiftedx;
                let i = i + 1;
            }
            if (~sgn) {
                let sum = -sum;
            }
            return sum;
        }

        /**
        * Returns the i-th bit of x.
        * The least significant bit is the 0-th bit.
        */
        function boolean bit(int x, int i) {
            return (x & a[i]) > 0;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q, r;
            var boolean sgn;

            if (y = 0) {
                do Sys.error(3);
            }

            let sgn = ((x > 0) = (y > 0)); 
            let qy2 = 0;
            let q = Math.absDivide(Math.abs(x), Math.abs(y));
            if (~sgn) {
                let q = -q;
            }
            return q;
        }

        /** Returns the integer part of x/y. */
        function int absDivide(int x, int y) {
            var int q;

            if (y > x | y < 0) {
                return 0;
            }
            let q = Math.absDivide(x, ^y);
            if (~((x - qy2) < y)) {
                let qy2 = qy2 + y;
                return ^q + 1;
            }
            return ^q;
        }


        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y, j, a, b, i, squared;

            if (x < 0) {
                do Sys.error(4);
            }

            let y = 0;
            let j = 7;
            let a = 0;
            let b = 0;
            while (j > -1) {
                let squared = a + b + Math.power(^j);
                if (~(squared > x) & (squared > 0)) {
                    let y = y + Math.power(j);
                    let a = squared;
                    let b = #b + Math.power(^j);
                }
                else {
                    let b = #b;
                }
                let j = j - 1;
            }
            return y;
        }


        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a > b) {
                return a;
            } else {
                return b;
            }
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a < b) {
                return a;
            } else {
                return b;
            }
        }
}
