// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static int heapBase, heapLength;
    static Array memory, freeList, lastSegment;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let memory = 0;
        let freeList = 2048;
        let freeList[0] = 14335;
        let freeList[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.

        var Array segment, prev, block;
        var int allocSize, segmentSize;

        if (size < 0) {
            do Sys.error(5);
        }

        if (size > 14335) {
            do Sys.error(6);
        }

        let allocSize = size + 1;
        let segment = freeList;
        let segmentSize = segment[0];
        let prev = 0;

        while (~(segment = null)) {
            if (segmentSize > size){
                if (segmentSize > (allocSize + 1)) {
                    let block = segment + segmentSize - size; //block location
                    let block[-1] = allocSize; //block size
                    let segment[0] = segmentSize - allocSize; //segment size
                }
                else { //reminder is too small
                    let block = segment + 1;
                    if ((segment[1] = null) | (prev = 0)) { //check if segment is edge of freeList
                        let freeList = segment[1];
                    }
                    else {
                        let prev[1] = segment[1];
                    }
                }
                return block;
            }
            let prev = segment;
            let segment = segment[1];
            let segmentSize = segment[0];
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        var Array segment, test;
        
        let o[0] = freeList;
        let freeList = o - 1;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int max, i;

        let max = o[0];
        let i = 1;
        while (i < o[-1]) {
            if (o[i] > max) {
                let max = o[i];
            }
            let i = i + 1;
        }
        return max;
    }
}
