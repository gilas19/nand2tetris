// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int max_lenght;
    field Array str;
    field int lenght;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (max_lenght < 0){
            do Sys.error(14);
        }
        let max_lenght = maxLength;
        let lenght = 0;
        if (max_lenght = 0){
            return this;
        }
        let str = Array.new(maxLength);
        return this;    
    }

    /** Disposes this string. */
    method void dispose() {
        if (max_lenght = 0){
            return;
        }
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return lenght;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j>(max_lenght-1)){
            do Sys.error(15);
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j>(max_lenght-1)){
            do Sys.error(16);
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(lenght=max_lenght){
            do Sys.error(17);
        }
        let str[lenght] = c;
        let lenght = lenght + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(lenght=0){
            do Sys.error(18);
        }
        let lenght = lenght - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val, i;
        var int curr_indx;
        var boolean neg_flag;

        let i = 0;
        let val = 0;

        //check that first val isnt neg
        if (str[0] = 45) {
            let neg_flag = true;
            let i = i + 1;
        }
        else {
            let neg_flag = false;
        }

        while (i < lenght) {
            let curr_indx = str[i] - 48;

            //check if the current index is a digit
            if ((curr_indx < 0) | (curr_indx > 9)) {
                let i = lenght;
            }
            else {
                let val = (val * 10) + (curr_indx);
                let i = i + 1;
            }
        }

        if (neg_flag) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        
        // Pseudocode:
        // 1. let last_digit = val % 10
        // 2. let c = character representing last_digit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        var int val;
        if (max_lenght = 0){
            do Sys.error(19);
        }
        if (val < 0) {
            let val = -val;
            let str[0] = 45; // '-' representation
            let lenght = 1;
        }else {
            let lenght = 0;
        }
        do int2String(val);
        return;     
    }
    
    method void int2String(int num) {
        var int last_digit;
        var int remaind_val;
        if( lenght = max_lenght){
            do Sys.error(19);
        }
        if (num < 10) {
            let str[lenght] = num + 48;
            let lenght = lenght + 1;
            return;
        }
        
        let remaind_val = num / 10;
        let last_digit = num - (remaind_val * 10);
        do int2String(remaind_val);
        do appendChar(last_digit + 48);
        return;
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
