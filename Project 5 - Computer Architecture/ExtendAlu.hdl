// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1 the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", .
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     Mux16(a=y, b=x, sel=instruction[4], out=sh);
     ShiftLeft(in=sh, out=shiftL);
     ShiftRight(in=sh, out=shiftR);
     Mux16(a=shiftR, b=shiftL, sel=instruction[5], out=shifted);

     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=ALUout, zr=a, ng=b);

     Mux4Way16(a=false, b=shifted, c=false, d=ALUout, sel=instruction[7..8], out=out, out[15]=ng, out[0..7]=outL, out[8..14]=outR);
     
     Or8Way(in=outL, out=sL);
     Or8Way(in[0..6]=outR, in[7]=false, out=sR);
     Or(a=sL, b=sR, out=szr);
     Not(in=szr, out=zr);
}    
